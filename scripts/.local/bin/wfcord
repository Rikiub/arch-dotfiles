#!/usr/bin/env bash

# posible positional arguments
modes=(region window output)
# posible optional arguments
formats=(mkv mp4 gif)
audio=false

# File Output
FILENAME="record_$(date +%Y-%-m-%-d_%-H-%-M-%-S)"
VIDEO_DIR="$(xdg-user-dir VIDEOS)"
OUTPUT="$VIDEO_DIR/$FILENAME"

# Function to display the help message
function show_help {
	echo "Usage: wfcord [${modes[*]}] [${formats[*]}] [OPTIONS]"
	echo ""
	echo "OPTIONS"
	echo "  -h, --help 	Display this help message"
	echo "  --audio       Include audio in the recording"
}

# Send a pretty notification
function send_notification {
	if $NOTIFY_SUPPORT; then
		notify-send --app-name="wf-recorder" --urgency=low "$@"
	fi
}

# Check if notify-send is installed
if command -v notify-send > /dev/null 2>&1; then
	NOTIFY_SUPPORT=true
else
	NOTIFY_SUPPORT=false
fi

# Stop the current recording if wf-recorder is running
if pgrep wf-recorder > /dev/null 2>&1; then
	echo "Stopping the current recording and saving it..."
	killall -s SIGINT wf-recorder
	wait

	# Send exit signal to Waybar
	pkill -RTMIN+8 waybar

	send_notification --icon=media-stop \
		"Recording completed" "$VIDEO_DIR"
	
	exit
fi

# Process optional arguments
while [[ "$#" -gt 0 ]]; do
	case $1 in
		-h|--help) show_help; exit 0 ;;
		-a|--audio) audio=true ;;
		-*|--*) echo "Invalid argument: $1"; exit 1 ;;
		*) break ;;
	esac
	shift
done

# Check extension format
case "$2" in
	mp4)
		WF_EXT="-f $OUTPUT.mp4"
		;;
	mkv)
		WF_EXT="-f $OUTPUT.mkv"
		;;
	gif)
		WF_EXT="-f $OUTPUT.gif -c gif"
		;;
	*)
		echo "Error: the second positional argument must be one of the following: [${formats[*]}]"
		exit 1
		;;
esac

# Check recording mode
case "$1" in
	region)
		WF_MODE="-g"
		WF_VALUE="$(slurp)"

		if [ $? -ne 0 ]; then
			echo "ERROR: slurp selection failed"

			send_notification --icon=dialog-error \
				"Failed to record" "Area not selected"

			exit 1
		fi
		;;
	window)
		WF_MODE="-g"
		WF_VALUE="$(swaymsg -t get_tree | jq -r '.. | select(.pid? and .visible?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"' | slurp)"
		;;
	output)
		WF_MODE="-o"
		WF_VALUE="$(swaymsg -t get_tree | jq -r '.nodes[] | select([recurse(.nodes[]?, .floating_nodes[]?) | .focused] | any) | .name')"
		;;
	*)
		echo "Error: the first positional argument must be one of the following: [${modes[*]}]"
		exit 1
		;;
esac

# If the --audio flag was specified, display a message an set variable
if $audio; then
	echo "Audio recording enabled"
	WF_AUDIO="--audio"
else
	echo "Recording without audio"
fi

if $NOTIFY_SUPPORT; then
	# Countdown
	for i in 3 2 1; do
		send_notification --icon=media-record --replace-id=1 --transient \
			"The recording will start in..." "$i"
		sleep 1
	done

	# Delete countdown notification
	send_notification --expire-time=1 --replace-id=1 --transient \
		"Recording started"
fi

echo "Recording has started. Execute the command again to end the recording."

# Start recording
wf-recorder $WF_AUDIO $WF_EXT $WF_MODE "$WF_VALUE" > /dev/null 2>&1 &

if [ -z pgrep wf-recorder > /dev/null 2>&1 ]; then
	send_notification --icon=dialog-error \
		"Failed to record"
	exit 1
fi

# Send enter signal to Waybar
pkill -RTMIN+8 waybar
